name: Dash Enterprise Deploy
description: Dash Enterprise Deploy
inputs:
  DE_PASSWORD:
    required: true
  DE_HOST:
    required: true
  DE_USERNAME:
    required: true
  GH_ACCESS_TOKEN:
    required: true
  app_name:
    required: false
    type: string
  app_directory:
    required: false
    default: ${{ github.workspace }}
  timeout:
    required: false
    default: 300
    
runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dekn-cli-python
      shell: bash
      run: |
        git config --global url."https://${GH_ACCESS_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        python -m pip install --upgrade pip
        pip install git+https://github.com/plotly/dekn-cli-python.git
      env:
        GH_ACCESS_TOKEN: ${{ inputs.GH_ACCESS_TOKEN }}
    - name: Set up git config
      shell: bash
      run: ${{ github.action_path }}/scripts/git_config.sh
    - name: Generate app name
      id: appname
      shell: bash
      run: |
        APP_NAME=$("$SCRIPTS_PATH/get_app_name.sh")
        echo "::set-output name=app_name::$APP_NAME"
      env:
        APP_NAME: ${{ inputs.app_name }}
        SCRIPTS_PATH: ${{ github.action_path }}/scripts
        EVENT_NUMBER: ${{github.event.number}}
    - name: Inject code and deploy
      shell: bash
      if: github.event.action != 'closed'
      run: |
        PATH="$HOME/bin:$PATH" CREATE_APP='true' $SCRIPTS_PATH/deploy.sh ${{ steps.appname.outputs.app_name }}
      env:
        DE_HOST: ${{inputs.DE_HOST}}
        DE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DE_USERNAME: ${{inputs.DE_USERNAME}}
        APP_DIRECTORY: ${{ inputs.app_directory }}
    - name: Check build status
      id: poll
      shell: bash
      run: |
        START_TIME=$(date +%s)
        # Start an infinite loop
        while true; do
          # Check the application status
          STATUS=$(APP=${{ steps.appname.outputs.app_name }} METHOD="DEPLOY_STATUS" python $SCRIPTS_PATH/manage_apps.py)

          # Check if the status is in a finished state or if we have reached the timeout limit
          if [[ "$STATUS" == "built" || "$STATUS" == "failed" || "$STATUS" == "cancelled" || $(( $(date +%s) - START_TIME )) -gt $TIMEOUT ]]; then
            break
          fi

          # Sleep for a few seconds before the next iteration
          sleep 5
        done
      env:
        DE_HOST: ${{inputs.DE_HOST}}
        DE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DE_USERNAME: ${{inputs.DE_USERNAME}}
        TIMEOUT: ${{ inputs.timeout }}
    - name: Remove staging application
      shell: bash
      if: github.event.action == 'closed'
      run: |
        APP=${{ steps.appname.outputs.app_name }} METHOD="DELETE" python ${{ github.action_path }}/scripts/manage_apps.py
      env:
        DE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DE_HOST: ${{inputs.DE_HOST}}
        DE_USERNAME: ${{inputs.DE_USERNAME}}
     - uses: LouisBrunner/checks-action@v1.6.0
       with:
        token: $GITHUB_TOKEN
        details_url: "https://$DE_HOST/apps/${{ steps.appname.outputs.app_name }}"
      env:
        DE_HOST: ${{inputs.DE_HOST}}
    - name: Check Endpoint Status
      shell: bash
      run: |
        echo "Endpoint status: ${{ steps.poll.outputs.status }}"
   

branding:
  icon: activity
  color: purple