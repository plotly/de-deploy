name: Dash Enterprise Deploy
description: Dash Enterprise Deploy
inputs:
  DE_PASSWORD:
    required: true
  DE_HOST:
    required: true
  DE_USERNAME:
    required: true
  GH_ACCESS_TOKEN:
    required: true
  app_name:
    required: false
    type: string
  app_directory:
    required: false
    default: ${{ github.workspace }}
    
runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dekn-cli-python
      shell: bash
      run: |
        git config --global url."https://${GH_ACCESS_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        python -m pip install --upgrade pip
        pip install git+https://github.com/plotly/dekn-cli-python.git
      env:
        GH_ACCESS_TOKEN: ${{ inputs.GH_ACCESS_TOKEN }}
    - name: Set up git config
      shell: bash
      run: ${{ github.action_path }}/scripts/git_config.sh
    - name: Inject code and deploy
      shell: bash
      if: github.event.action != 'closed'
      run: |
        APP_NAME=$("$SCRIPTS_PATH/get_app_name.sh")
        PATH="$HOME/bin:$PATH" CREATE_APP='true' $SCRIPTS_PATH/deploy.sh $APP_NAME
      env:
        DE_HOST: ${{inputs.DE_HOST}}
        DE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DE_USERNAME: ${{inputs.DE_USERNAME}}
        APP_NAME: ${{ inputs.app_name }}
        SCRIPTS_PATH: ${{ github.action_path }}/scripts
        EVENT_NUMBER: ${{github.event.number}}
        APP_DIRECTORY: ${{ inputs.app_directory }}
    - name: Check build status
      id: poll
      shell: bash
      run: |
        APP_NAME=$("$SCRIPTS_PATH/get_app_name.sh")
        START_TIME=$(date +%s)
        # Start an infinite loop
        while true; do
          # Check the application status
          STATUS=$(APP=$APP_NAME METHOD="DEPLOY_STATUS" python $SCRIPTS_PATH/manage_apps.py)

          $ Check if the status is in a finished state or if we have reached out timeout
          if [[ "$STATUS" == "built" || "$STATUS" == "failed" || "$STATUS" == "cancelled" || $(( $(date +%s) - START_TIME )) -gt $TIMEOUT ]]; then
            break
          fi

          # Sleep for a few seconds before the next iteration
          sleep 5
        done
      env:
        DE_HOST: ${{inputs.DE_HOST}}
        DE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DE_USERNAME: ${{inputs.DE_USERNAME}}
        APP_NAME: ${{ inputs.app_name }}
        SCRIPTS_PATH: ${{ github.action_path }}/scripts
        TIMEOUT: 300
    - name: Check Endpoint Status
      shell: bash
      run: |
        echo "Endpoint status: ${{ steps.poll.outputs.status }}"
    - name: Generate comment for PR
      id: changed
      if: github.event_name == 'pull_request' && github.event.pull_request && github.event.action != 'closed'
      shell: bash
      run: |
        APP_NAME=$("$SCRIPTS_PATH/get_app_name.sh")
        $SCRIPTS_PATH/generate_comment.sh
      env:
        DE_HOST: ${{inputs.DE_HOST}}
        APP_NAME: ${{ inputs.app_name }}
        SCRIPTS_PATH: ${{ github.action_path }}/scripts
        EVENT_NUMBER: ${{github.event.number}}
    - name: Check for existing comment
      uses: peter-evans/find-comment@v2
      id: fc
      if: github.event_name == 'pull_request' && github.event.pull_request && github.event.action != 'closed'
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
    - name: Post comment
      if: steps.fc.outputs.comment-id == '' && github.event_name == 'pull_request' && github.event.pull_request && github.event.action != 'closed'
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-file: 'message.md'
    - name: Update comment
      if: steps.fc.outputs.comment-id != '' && github.event_name == 'pull_request' && github.event.pull_request && github.event.action != 'closed'
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        edit-mode: replace
        body-file: 'message.md'
    - name: Remove staging application
      shell: bash
      if: github.event.action == 'closed'
      run: |
        APP_NAME=$("$SCRIPTS_PATH/get_app_name.sh")
        APP=$APP_NAME METHOD="DELETE" python ${{ github.action_path }}/scripts/manage_apps.py
      env:
        DE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DE_HOST: ${{inputs.DE_HOST}}
        DE_USERNAME: ${{inputs.DE_USERNAME}}
        APP_NAME: ${{ inputs.app_name }}
        SCRIPTS_PATH: ${{ github.action_path }}/scripts
        EVENT_NUMBER: ${{github.event.number}}
    - name: Check for existing comment
      uses: peter-evans/find-comment@v2
      id: fo
      if: github.event.action == 'closed'
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
    - name: Update existing comment
      if: steps.fo.outputs.comment-id != '' && github.event.action == 'closed'
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fo.outputs.comment-id }}
        edit-mode: replace
        body: |
          Any staging application deployed from this PR has been removed.
      

branding:
  icon: activity
  color: purple